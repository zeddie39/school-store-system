
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { 
  Users, 
  Package, 
  AlertTriangle, 
  TrendingUp, 
  Store,
  UserCheck
} from 'lucide-react';
import StoreGrid from '../stores/StoreGrid';
import { useStores } from '@/hooks/useStores';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Download } from 'lucide-react';
import StatsCard from '../common/StatsCard';

const AdminDashboard: React.FC = () => {
  const { stores } = useStores();
  const [selectedDept, setSelectedDept] = useState<string>('');
  // Simulated reports per department
  const departmentReports = [
    {
      id: 1,
      name: 'Monthly Inventory Report - January 2024',
      type: 'Inventory',
      generatedBy: 'Admin',
      date: '2024-01-16',
      format: 'PDF',
      size: '2.4 MB',
      department: 'library',
    },
    {
      id: 2,
      name: 'User Activity Summary - Q4 2023',
      type: 'User Activity',
      generatedBy: 'System',
      date: '2024-01-01',
      format: 'Excel',
      size: '1.8 MB',
      department: 'laboratory',
    },
    {
      id: 3,
      name: 'Financial Report - December 2023',
      type: 'Financial',
      generatedBy: 'Bursar',
      date: '2023-12-31',
      format: 'PDF',
      size: '3.2 MB',
      department: 'kitchen',
    },
    {
      id: 4,
      name: 'Sports Store Usage - March 2024',
      type: 'Usage',
      generatedBy: 'Admin',
      date: '2024-03-10',
      format: 'PDF',
      size: '1.1 MB',
      department: 'sports',
    },
    {
      id: 5,
      name: 'ICT Lab Equipment Report - April 2024',
      type: 'Inventory',
      generatedBy: 'ICT Admin',
      date: '2024-04-05',
      format: 'Excel',
      size: '2.0 MB',
      department: 'ict_lab',
    },
  ];

  const handleDownloadReport = (report) => {
    let content = '';
    let mimeType = '';
    let fileExtension = '';
    if (report.format.toLowerCase() === 'pdf') {
      content = `PDF Report: ${report.name}\nType: ${report.type}\nGenerated by: ${report.generatedBy}\nDate: ${report.date}`;
      mimeType = 'application/pdf';
      fileExtension = 'pdf';
    } else if (report.format.toLowerCase() === 'excel') {
      content = `Excel Report: ${report.name}\nType: ${report.type}\nGenerated by: ${report.generatedBy}\nDate: ${report.date}`;
      mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
      fileExtension = 'xlsx';
    } else {
      content = `Report: ${report.name}`;
      mimeType = 'text/plain';
      fileExtension = 'txt';
    }
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${report.name.replace(/\s+/g, '_')}.${fileExtension}`;
    document.body.appendChild(a);
    a.click();
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 100);
  };
  const stats = [
    {
      title: "Total Users",
      value: "127",
      description: "Active system users",
      icon: Users,
      trend: "+12%",
      color: "text-primary"
    },
    {
      title: "Total Items",
      value: "2,847",
      description: "Items across all stores",
      icon: Package,
      trend: "+8%",
      color: "text-success"
    },
    {
      title: "Low Stock Alerts",
      value: "23",
      description: "Items needing restock",
      icon: AlertTriangle,
      trend: "-5%",
      color: "text-warning"
    },
    {
      title: "Pending Approvals",
      value: "15",
      description: "Awaiting approval",
      icon: UserCheck,
      trend: "+3%",
      color: "text-info"
    }
  ];

  const recentActivities = [
    { user: "John Doe", action: "Added 50 Biology textbooks", store: "Library Store", time: "2 hours ago" },
    { user: "Jane Smith", action: "Requested lab equipment", store: "Laboratory Store", time: "4 hours ago" },
    { user: "Mike Johnson", action: "Approved kitchen supplies", store: "Kitchen Store", time: "6 hours ago" },
    { user: "Sarah Wilson", action: "Updated sports inventory", store: "Sports Store", time: "8 hours ago" }
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">Admin Dashboard</h1>
        <p className="text-muted-foreground">Welcome to the administrative control panel</p>
      </div>

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat, index) => (
          <StatsCard key={index} {...stat} />
        ))}
      </div>


      {/* Store/Department Reports Section */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Store className="w-5 h-5" />
            Department Reports
          </CardTitle>
          <CardDescription>
            Select a department to view and download its reports
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col md:flex-row gap-4 items-center mb-4">
            <Select value={selectedDept} onValueChange={setSelectedDept}>
              <SelectTrigger className="w-64">
                <SelectValue placeholder="Select Department" />
              </SelectTrigger>
              <SelectContent>
                {stores.map((store) => (
                  <SelectItem key={store.id} value={store.store_type}>
                    {store.name} ({store.store_type.replace('_', ' ')})
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          {selectedDept ? (
            <div className="overflow-x-auto">
              <table className="min-w-full text-sm border">
                <thead>
                  <tr className="bg-muted">
                    <th className="p-2 text-left">Report Name</th>
                    <th className="p-2 text-left">Type</th>
                    <th className="p-2 text-left">Generated By</th>
                    <th className="p-2 text-left">Date</th>
                    <th className="p-2 text-left">Format</th>
                    <th className="p-2 text-left">Size</th>
                    <th className="p-2 text-left">Action</th>
                  </tr>
                </thead>
                <tbody>
                  {departmentReports.filter(r => r.department === selectedDept).length === 0 ? (
                    <tr><td colSpan={7} className="p-4 text-center text-muted-foreground">No reports found for this department.</td></tr>
                  ) : (
                    departmentReports.filter(r => r.department === selectedDept).map((report) => (
                      <tr key={report.id} className="border-b">
                        <td className="p-2">{report.name}</td>
                        <td className="p-2">{report.type}</td>
                        <td className="p-2">{report.generatedBy}</td>
                        <td className="p-2">{report.date}</td>
                        <td className="p-2">{report.format}</td>
                        <td className="p-2">{report.size}</td>
                        <td className="p-2">
                          <Button size="sm" variant="outline" onClick={() => handleDownloadReport(report)}>
                            <Download className="w-4 h-4 mr-1" /> Download
                          </Button>
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="text-muted-foreground">Select a department to view its reports.</div>
          )}
        </CardContent>
      </Card>

      {/* Store Overview */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Store className="w-5 h-5" />
            Store Overview
          </CardTitle>
          <CardDescription>
            Manage all departmental stores from one place
          </CardDescription>
        </CardHeader>
        <CardContent>
          <StoreGrid userRole="admin" />
        </CardContent>
      </Card>

      {/* Recent Activity */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="w-5 h-5" />
            Recent Activity
          </CardTitle>
          <CardDescription>
            Latest actions across all stores
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {recentActivities.map((activity, index) => (
              <div key={index} className="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
                <div className="flex-1">
                  <p className="font-medium">{activity.user}</p>
                  <p className="text-sm text-muted-foreground">{activity.action}</p>
                  <Badge variant="outline" className="mt-1">
                    {activity.store}
                  </Badge>
                </div>
                <span className="text-sm text-muted-foreground">{activity.time}</span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default AdminDashboard;
