import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Download, Store, ArrowRight } from 'lucide-react';
import { useStores } from '@/hooks/useStores';
import { useNavigate, useParams, Routes, Route } from 'react-router-dom';
import DepartmentPasswordDialog from '@/components/auth/DepartmentPasswordDialog';
import BackButton from '@/components/common/BackButton';

// Simulated reports per department
const departmentReports = [
  {
    id: 1,
    name: 'Monthly Inventory Report - January 2024',
    type: 'Inventory',
    generatedBy: 'Admin',
    date: '2024-01-16',
    format: 'PDF',
    size: '2.4 MB',
    department: 'library',
  },
  {
    id: 2,
    name: 'User Activity Summary - Q4 2023',
    type: 'User Activity',
    generatedBy: 'System',
    date: '2024-01-01',
    format: 'Excel',
    size: '1.8 MB',
    department: 'laboratory',
  },
  {
    id: 3,
    name: 'Financial Report - December 2023',
    type: 'Financial',
    generatedBy: 'Bursar',
    date: '2023-12-31',
    format: 'PDF',
    size: '3.2 MB',
    department: 'kitchen',
  },
  {
    id: 4,
    name: 'Sports Store Usage - March 2024',
    type: 'Usage',
    generatedBy: 'Admin',
    date: '2024-03-10',
    format: 'PDF',
    size: '1.1 MB',
    department: 'sports',
  },
  {
    id: 5,
    name: 'ICT Lab Equipment Report - April 2024',
    type: 'Inventory',
    generatedBy: 'ICT Admin',
    date: '2024-04-05',
    format: 'Excel',
    size: '2.0 MB',
    department: 'ict_lab',
  },
];



export function DepartmentDropdownNav({ stores }: { stores: any[] }) {
  const navigate = useNavigate();
  const [selected, setSelected] = React.useState('');
  const [passwordDialog, setPasswordDialog] = React.useState(false);
  const [selectedDept, setSelectedDept] = React.useState('');
  
  const handleDepartmentSelect = (value: string) => {
    setSelected(value);
    setSelectedDept(value);
    setPasswordDialog(true);
  };

  const handlePasswordSuccess = () => {
    if (selected) {
      navigate(`/stores/${selected}`);
    }
  };
  return (
    <>
      <div className="max-w-xs">
        <label className="block mb-2 font-medium">Department</label>
        <select
          className="w-full border rounded px-3 py-2"
          value=""
          onChange={e => handleDepartmentSelect(e.target.value)}
        >
          <option value="">Select department...</option>
          {stores.map((store: any) => {
            // Ensure value matches department keys in departmentReports
            let value = store.store_type;
            if (value === 'ict') value = 'ict_lab';
            return (
              <option key={store.id} value={value}>
                {store.name} ({value.replace('_', ' ')})
              </option>
            );
          })}
        </select>
      </div>
      
      <DepartmentPasswordDialog
        open={passwordDialog}
        onOpenChange={setPasswordDialog}
        departmentName={selectedDept}
        onSuccess={handlePasswordSuccess}
      />
    </>
  );
}

// Department reports page
const DepartmentReports: React.FC = () => {
  const { department } = useParams();
  const navigate = useNavigate();
  const { stores } = useStores();
  const store = stores.find((s: any) => s.store_type === department);

  const handleDownloadReport = (report: any) => {
    let content = '';
    let mimeType = '';
    let fileExtension = '';
    if (report.format.toLowerCase() === 'pdf') {
      content = `PDF Report: ${report.name}\nType: ${report.type}\nGenerated by: ${report.generatedBy}\nDate: ${report.date}`;
      mimeType = 'application/pdf';
      fileExtension = 'pdf';
    } else if (report.format.toLowerCase() === 'excel') {
      content = `Excel Report: ${report.name}\nType: ${report.type}\nGenerated by: ${report.generatedBy}\nDate: ${report.date}`;
      mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
      fileExtension = 'xlsx';
    } else {
      content = `Report: ${report.name}`;
      mimeType = 'text/plain';
      fileExtension = 'txt';
    }
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${report.name.replace(/\s+/g, '_')}.${fileExtension}`;
    document.body.appendChild(a);
    a.click();
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 100);
  };

  if (!store) {
    return <div className="p-6">Department not found.</div>;
  }

  return (
    <div className="space-y-6 p-4 sm:p-6">
      <BackButton to="/stores" label="Back to Departments" className="mb-4" />
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Store className="w-5 h-5" />
            {store.name} Reports
          </CardTitle>
          <CardDescription>
            All reports for {store.name} ({store.store_type.replace('_', ' ')})
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm border">
              <thead>
                <tr className="bg-muted">
                  <th className="p-2 text-left">Report Name</th>
                  <th className="p-2 text-left">Type</th>
                  <th className="p-2 text-left">Generated By</th>
                  <th className="p-2 text-left">Date</th>
                  <th className="p-2 text-left">Format</th>
                  <th className="p-2 text-left">Size</th>
                  <th className="p-2 text-left">Action</th>
                </tr>
              </thead>
              <tbody>
                {departmentReports.filter(r => r.department === department).length === 0 ? (
                  <tr><td colSpan={7} className="p-4 text-center text-muted-foreground">No reports found for this department.</td></tr>
                ) : (
                  departmentReports.filter(r => r.department === department).map((report) => (
                    <tr key={report.id} className="border-b">
                      <td className="p-2">{report.name}</td>
                      <td className="p-2">{report.type}</td>
                      <td className="p-2">{report.generatedBy}</td>
                      <td className="p-2">{report.date}</td>
                      <td className="p-2">{report.format}</td>
                      <td className="p-2">{report.size}</td>
                      <td className="p-2">
                        <Button size="sm" variant="outline" onClick={() => handleDownloadReport(report)}>
                          <Download className="w-4 h-4 mr-1" /> Download
                        </Button>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

const StoresPage: React.FC = () => {
  const { stores } = useStores();
  return (
        <Routes>
      <Route
        path="/"
        element={
          <div className="space-y-6 p-4 sm:p-6">
            <div className="flex items-center justify-between mb-4">
              <h1 className="text-2xl sm:text-3xl font-bold">Department Reports</h1>
              <BackButton to="/" label="Dashboard" />
            </div>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Store className="w-5 h-5" />
                  Department Access
                </CardTitle>
                <CardDescription>
                  Select a department from the dropdown to access its reports (password required)
                </CardDescription>
              </CardHeader>
              <CardContent>
                <DepartmentDropdownNav stores={stores} />
              </CardContent>
            </Card>
          </div>
        }
      />
      <Route path=":department" element={<DepartmentReports />} />
    </Routes>
  );
};

export default StoresPage;
